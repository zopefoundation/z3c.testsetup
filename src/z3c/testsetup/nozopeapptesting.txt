===================================
Testsetups without zope.app.testing
===================================

In some packages zope.app.testing might not be available or it is not
wanted. This is important for ``z3c.testsetup`` because functional
tests require that package for setup, etc. For example when it comes
to plain Python packages. 

The ``z3c.testsetup`` package in this case should work as usual,
except naturally, support for functional test setups (i.e. such which
require ZCML layers).

To simulate this, we removed ``zope.app.testing`` from the registered
modules in ``sys.modules`` before running this testfile and reloaded
the z3c.testsetup package. The latter is necessary to make sure, that
no hidden pieces of functional tests remain somewhere.

We can see this when we do a testsetup, that would normally include
functional tests. Consider the example given in the
``samplesetup_short0.py`` setup file, which is located in the ``cave``
package of the ``tests``::

    >>> import os
    >>> cavepath = os.path.join(os.path.dirname(__file__), 'tests', 'cave')
    >>> setupfile = os.path.join(cavepath, 'samplesetup_short0.py')
    >>> print open(setupfile).read()
    import z3c.testsetup
    test_suite = z3c.testsetup.register_all_tests('z3c.testsetup.tests.cave')

It is the same setup file, that we used in testrunner.txt (at the very
beginning). Using it there (with ``zope.app.testing`` available), this
setup found four (successful) tests, of which two were functional
ones.

The only difference now is, that we have no ``zope.app.testing`` and
therefore no machinery for functional tests. We can check that
beforehand by looking at the testgetters defined in the general test
collector::

    >>> import z3c.testsetup
    >>> from z3c.testsetup import TestCollector
    >>> tc = z3c.testsetup.TestCollector.handled_getters
    >>> from pprint import pprint
    >>> pprint(sorted([str(x) for x in tc]))
    ["<class 'z3c.testsetup.testgetter.PythonTestGetter'>",
     "<class 'z3c.testsetup.testgetter.SimpleDocTestGetter'>"]

As a result there will be less tests found and run by the testrunner::

    >>> import sys
    >>> defaults = [
    ...     '--path', cavepath,
    ...     '--tests-pattern', '^samplesetup_short0$',
    ...     ]
    >>> sys.argv = 'test '.split()
    >>> from z3c.testsetup import testrunner
    >>> testrunner.run(defaults)
    Running zope.testing.testrunner.layer.UnitTests tests:
      Set up zope.testing.testrunner.layer.UnitTests in ... seconds.
      Ran 2 tests with 0 failures and 0 errors in ... seconds.
    Tearing down left over layers:
      Tear down zope.testing.testrunner.layer.UnitTests in ... seconds.
    False

As we can see, only unit test were run and no functional ones anymore.

When we specify ``:zcml-layer:`` although there is no
`zope.app.testing` available, we will get a warning while the non
functional tests should still be registered correctly:

    >>> import sys
    >>> cavepath = os.path.join(os.path.dirname(__file__), 
    ...   'tests', 'layered_cave')
    >>> defaults = [
    ...     '--path', cavepath,
    ...     '--tests-pattern', '^layeredsetup02$',
    ...     ]
    >>> sys.argv = 'test -vv'.split()
    >>> from z3c.testsetup import testrunner
    >>> testrunner.run(defaults)
    Warning:  You specified `:zcml-file:` in
    <BLANKLINE>
        /layered_cave/foo/afunctionaldoctest.txt
    <BLANKLINE>
    but there seems to be no `zope.app.testing` package available.
    Please include `zope.app.testing` in your project setup to run this testfile.
    <BLANKLINE>
    Running tests at level 1
    Running z3c.testsetup.tests.layered_cave.layer.UnitLayer1 tests:
      Set up z3c.testsetup.tests.layered_cave.layer.UnitLayer1 in N.NNN seconds.
      Running:
        Running testSetUp of UnitLayer1
     /layered_cave/foo/simpledoctest.txt    Running testTearDown of UnitLayer1
    <BLANKLINE>
      Ran 1 tests with 0 failures and 0 errors in N.NNN seconds.
    Tearing down left over layers:
      Tear down z3c.testsetup...layered_cave.layer.UnitLayer1 in N.NNN seconds.
    False
